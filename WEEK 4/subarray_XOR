#include <stdio.h>
#include <stdlib.h>

// Hash table entry
typedef struct {
    int key;   // Stores the XOR value
    int value; // Stores the count of occurrences
} HashEntry;

// Hash table structure
typedef struct {
    HashEntry *entries;
    int size;
} HashTable;

// Create a hash table
HashTable* createHashTable(int size) {
    HashTable* table = (HashTable*)malloc(sizeof(HashTable));
    table->size = size;
    table->entries = (HashEntry*)calloc(size, sizeof(HashEntry));
    return table;
}

// Hash function
int hashFunction(int key, int size) {
    return abs(key) % size;
}

// Insert into hash table (with linear probing)
void insert(HashTable* table, int key, int value) {
    int index = hashFunction(key, table->size);
    while (table->entries[index].key != 0) {
        if (table->entries[index].key == key) {
            table->entries[index].value += value; // Increase count
            return;
        }
        index = (index + 1) % table->size;
    }
    table->entries[index].key = key;
    table->entries[index].value = value;
}

// Search in hash table
int search(HashTable* table, int key) {
    int index = hashFunction(key, table->size);
    while (table->entries[index].key != 0) {
        if (table->entries[index].key == key) return table->entries[index].value;
        index = (index + 1) % table->size;
    }
    return 0;
}

// Function to count subarrays with XOR equal to B
int countSubarraysWithXOR(int* A, int n, int B) {
    HashTable* table = createHashTable(n * 2); // Create hash table

    int count = 0, prefixXOR = 0;
    insert(table, 0, 1); // Base case: XOR of empty prefix

    for (int i = 0; i < n; i++) {
        prefixXOR ^= A[i]; // Compute prefix XOR

        // Check if (prefixXOR ^ B) exists in the hash map
        count += search(table, prefixXOR ^ B);

        // Store the current prefix XOR in the hash table
        insert(table, prefixXOR, 1);
    }

    free(table->entries);
    free(table);
    return count;
}

// Main function to test the solution
int main() {
    int A1[] = {4, 2, 2, 6, 4};
    int B1 = 6;
    int size1 = sizeof(A1) / sizeof(A1[0]);
    printf("Output: %d\n", countSubarraysWithXOR(A1, size1, B1)); // Expected: 4

    int A2[] = {5, 6, 7, 8, 9};
    int B2 = 5;
    int size2 = sizeof(A2) / sizeof(A2[0]);
    printf("Output: %d\n", countSubarraysWithXOR(A2, size2, B2)); // Expected: 2

    return 0;
}
