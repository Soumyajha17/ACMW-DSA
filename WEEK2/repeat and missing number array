#include <stdio.h>

void findDuplicateAndMissing(int nums[], int n, int *A, int *B) {
    long long sum = 0, squareSum = 0;
    long long expectedSum = (long long)n * (n + 1) / 2;
    long long expectedSquareSum = (long long)n * (n + 1) * (2 * n + 1) / 6;

    for (int i = 0; i < n; i++) {
        sum += nums[i];
        squareSum += (long long)nums[i] * nums[i];
    }

    long long diffSum = expectedSum - sum;
    long long diffSquareSum = expectedSquareSum - squareSum;

    *A = (int)((diffSquareSum / diffSum + diffSum) / 2);
    *B = (int)(*A - diffSum);
}

int main() {
    int n;
    scanf("%d", &n);
    int nums[n];
    
    for (int i = 0; i < n; i++) {
        scanf("%d", &nums[i]);
    }
    
    int A, B;
    findDuplicateAndMissing(nums, n, &A, &B);
    printf("%d %d\n", A, B);

    return 0;
}
